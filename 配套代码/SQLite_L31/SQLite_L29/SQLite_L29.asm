; Listing generated by Microsoft (R) Optimizing Compiler Version 19.24.28117.0 

	TITLE	C:\Users\libit\source\repos\SQLite_L29\SQLite_L29\SQLite_L29.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG7387	DB	'Hello World!', 0aH, 00H
	ORG $+2
$SG7388	DB	'test.db', 00H
$SG7389	DB	'haha.db', 00H
$SG7390	DB	'main', 00H
	ORG $+3
$SG7442	DB	'%d,%d', 0aH, 00H
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	?backupDb@@YAHPAUsqlite3@@PBD1HHHHHHHHHP6AXHH@Z@Z ; backupDb
PUBLIC	?XProgress@@YAXHH@Z				; XProgress
PUBLIC	_main
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	_sqlite3_close:PROC
EXTRN	_sqlite3_open:PROC
EXTRN	_sqlite3_errcode:PROC
EXTRN	_sqlite3_sleep:PROC
EXTRN	_sqlite3_backup_init:PROC
EXTRN	_sqlite3_backup_step:PROC
EXTRN	_sqlite3_backup_finish:PROC
EXTRN	_sqlite3_backup_remaining:PROC
EXTRN	_sqlite3_backup_pagecount:PROC
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
; Function compile flags: /Odtp
; File C:\Users\libit\source\repos\SQLite_L29\SQLite_L29\SQLite_L29.cpp
_TEXT	SEGMENT
_result$ = -48						; size = 4
_zFilename$ = -44					; size = 4
_address_sqlite3_open$ = -40				; size = 4
_address_sqlite3_backup_init$ = -36			; size = 4
_address_sqlite3_backup_step$ = -32			; size = 4
_address_sqlite3_backup_remaining$ = -28		; size = 4
_address_sqlite3_backup_pagecount$ = -24		; size = 4
_address_sqlite3_sleep$ = -20				; size = 4
_address_sqlite3_backup_finish$ = -16			; size = 4
_address_sqlite3_errcode$ = -12				; size = 4
_address_sqlite3_close$ = -8				; size = 4
_db$ = -4						; size = 4
_main	PROC

; 45   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H

; 46   : 	printf("Hello World!\n");

	push	OFFSET $SG7387
	call	_printf
	add	esp, 4

; 47   : 	sqlite3* db = NULL;

	mov	DWORD PTR _db$[ebp], 0

; 48   : 	int result = sqlite3_open("test.db", &db);

	lea	eax, DWORD PTR _db$[ebp]
	push	eax
	push	OFFSET $SG7388
	call	_sqlite3_open
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax

; 49   : 
; 50   : 	const char* zFilename = "haha.db";

	mov	DWORD PTR _zFilename$[ebp], OFFSET $SG7389

; 51   : 	int address_sqlite3_open = (int)&sqlite3_open;

	mov	DWORD PTR _address_sqlite3_open$[ebp], OFFSET _sqlite3_open

; 52   : 	int address_sqlite3_backup_init = (int)&sqlite3_backup_init;

	mov	DWORD PTR _address_sqlite3_backup_init$[ebp], OFFSET _sqlite3_backup_init

; 53   : 	int address_sqlite3_backup_step = (int)&sqlite3_backup_step;

	mov	DWORD PTR _address_sqlite3_backup_step$[ebp], OFFSET _sqlite3_backup_step

; 54   : 	int address_sqlite3_backup_remaining = (int)&sqlite3_backup_remaining;

	mov	DWORD PTR _address_sqlite3_backup_remaining$[ebp], OFFSET _sqlite3_backup_remaining

; 55   : 	int address_sqlite3_backup_pagecount = (int)&sqlite3_backup_pagecount;

	mov	DWORD PTR _address_sqlite3_backup_pagecount$[ebp], OFFSET _sqlite3_backup_pagecount

; 56   : 	int address_sqlite3_sleep = (int)&sqlite3_sleep;

	mov	DWORD PTR _address_sqlite3_sleep$[ebp], OFFSET _sqlite3_sleep

; 57   : 	int address_sqlite3_backup_finish = (int)&sqlite3_backup_finish;

	mov	DWORD PTR _address_sqlite3_backup_finish$[ebp], OFFSET _sqlite3_backup_finish

; 58   : 	int address_sqlite3_errcode = (int)&sqlite3_errcode;

	mov	DWORD PTR _address_sqlite3_errcode$[ebp], OFFSET _sqlite3_errcode

; 59   : 	int address_sqlite3_close = (int)&sqlite3_close;

	mov	DWORD PTR _address_sqlite3_close$[ebp], OFFSET _sqlite3_close

; 60   : 	backupDb(

	push	OFFSET ?XProgress@@YAXHH@Z		; XProgress
	mov	ecx, DWORD PTR _address_sqlite3_close$[ebp]
	push	ecx
	mov	edx, DWORD PTR _address_sqlite3_errcode$[ebp]
	push	edx
	mov	eax, DWORD PTR _address_sqlite3_backup_finish$[ebp]
	push	eax
	mov	ecx, DWORD PTR _address_sqlite3_sleep$[ebp]
	push	ecx
	mov	edx, DWORD PTR _address_sqlite3_backup_pagecount$[ebp]
	push	edx
	mov	eax, DWORD PTR _address_sqlite3_backup_remaining$[ebp]
	push	eax
	mov	ecx, DWORD PTR _address_sqlite3_backup_step$[ebp]
	push	ecx
	mov	edx, DWORD PTR _address_sqlite3_backup_init$[ebp]
	push	edx
	mov	eax, DWORD PTR _address_sqlite3_open$[ebp]
	push	eax
	push	OFFSET $SG7390
	mov	ecx, DWORD PTR _zFilename$[ebp]
	push	ecx
	mov	edx, DWORD PTR _db$[ebp]
	push	edx
	call	?backupDb@@YAHPAUsqlite3@@PBD1HHHHHHHHHP6AXHH@Z@Z ; backupDb
	add	esp, 52					; 00000034H

; 61   : 		db,
; 62   : 		zFilename,
; 63   : 		"main",
; 64   : 		address_sqlite3_open,
; 65   : 		address_sqlite3_backup_init,
; 66   : 		address_sqlite3_backup_step,
; 67   : 		address_sqlite3_backup_remaining,
; 68   : 		address_sqlite3_backup_pagecount,
; 69   : 		address_sqlite3_sleep,
; 70   : 		address_sqlite3_backup_finish,
; 71   : 		address_sqlite3_errcode,
; 72   : 		address_sqlite3_close,
; 73   : 		XProgress);
; 74   : 
; 75   : 	sqlite3_close(db);

	mov	eax, DWORD PTR _db$[ebp]
	push	eax
	call	_sqlite3_close
	add	esp, 4

; 76   : }

	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\libit\source\repos\SQLite_L29\SQLite_L29\SQLite_L29.cpp
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?XProgress@@YAXHH@Z PROC				; XProgress

; 139  : {

	push	ebp
	mov	ebp, esp

; 140  : 	printf("%d,%d\n",a,b);

	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	push	OFFSET $SG7442
	call	_printf
	add	esp, 12					; 0000000cH

; 141  : }

	pop	ebp
	ret	0
?XProgress@@YAXHH@Z ENDP				; XProgress
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\libit\source\repos\SQLite_L29\SQLite_L29\SQLite_L29.cpp
_TEXT	SEGMENT
_p_Sqlite3_close$ = -48					; size = 4
_p_Sqlite3_errcode$ = -44				; size = 4
_p_Sqlite3_backup_finish$ = -40				; size = 4
_p_Sqlite3_sleep$ = -36					; size = 4
_p_Sqlite3_backup_remaining$ = -32			; size = 4
_p_Sqlite3_backup_pagecount$ = -28			; size = 4
_p_Sqlite3_backup_step$ = -24				; size = 4
_p_Sqlite3_backup_init$ = -20				; size = 4
_p_Sqlite3_open$ = -16					; size = 4
_pFile$ = -12						; size = 4
_pBackup$ = -8						; size = 4
_rc$ = -4						; size = 4
_pDb$ = 8						; size = 4
_zFilename$ = 12					; size = 4
_myMain$ = 16						; size = 4
_address_sqlite3_open$ = 20				; size = 4
_address_sqlite3_backup_init$ = 24			; size = 4
_address_sqlite3_backup_step$ = 28			; size = 4
_address_sqlite3_backup_remaining$ = 32			; size = 4
_address_sqlite3_backup_pagecount$ = 36			; size = 4
_address_sqlite3_sleep$ = 40				; size = 4
_address_sqlite3_backup_finish$ = 44			; size = 4
_address_sqlite3_errcode$ = 48				; size = 4
_address_sqlite3_close$ = 52				; size = 4
_xProgress$ = 56					; size = 4
?backupDb@@YAHPAUsqlite3@@PBD1HHHHHHHHHP6AXHH@Z@Z PROC	; backupDb

; 92   : ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H

; 93   : 	int rc;                     /* Function return code */
; 94   : 	sqlite3* pFile;             /* Database connection opened on zFilename */
; 95   : 	sqlite3_backup* pBackup;    /* Backup handle used to copy data */
; 96   : 
; 97   : 
; 98   : 	Sqlite3_open p_Sqlite3_open = (Sqlite3_open)address_sqlite3_open;

	mov	eax, DWORD PTR _address_sqlite3_open$[ebp]
	mov	DWORD PTR _p_Sqlite3_open$[ebp], eax

; 99   : 	Sqlite3_backup_init p_Sqlite3_backup_init = (Sqlite3_backup_init)address_sqlite3_backup_init;

	mov	ecx, DWORD PTR _address_sqlite3_backup_init$[ebp]
	mov	DWORD PTR _p_Sqlite3_backup_init$[ebp], ecx

; 100  : 	Sqlite3_backup_step p_Sqlite3_backup_step = (Sqlite3_backup_step)address_sqlite3_backup_step;

	mov	edx, DWORD PTR _address_sqlite3_backup_step$[ebp]
	mov	DWORD PTR _p_Sqlite3_backup_step$[ebp], edx

; 101  : 	Sqlite3_backup_remaining p_Sqlite3_backup_remaining = (Sqlite3_backup_remaining)address_sqlite3_backup_remaining;

	mov	eax, DWORD PTR _address_sqlite3_backup_remaining$[ebp]
	mov	DWORD PTR _p_Sqlite3_backup_remaining$[ebp], eax

; 102  : 	Sqlite3_backup_pagecount p_Sqlite3_backup_pagecount = (Sqlite3_backup_pagecount)address_sqlite3_backup_pagecount;

	mov	ecx, DWORD PTR _address_sqlite3_backup_pagecount$[ebp]
	mov	DWORD PTR _p_Sqlite3_backup_pagecount$[ebp], ecx

; 103  : 	Sqlite3_sleep p_Sqlite3_sleep = (Sqlite3_sleep)address_sqlite3_sleep;

	mov	edx, DWORD PTR _address_sqlite3_sleep$[ebp]
	mov	DWORD PTR _p_Sqlite3_sleep$[ebp], edx

; 104  : 	Sqlite3_backup_finish p_Sqlite3_backup_finish = (Sqlite3_backup_finish)address_sqlite3_backup_finish;

	mov	eax, DWORD PTR _address_sqlite3_backup_finish$[ebp]
	mov	DWORD PTR _p_Sqlite3_backup_finish$[ebp], eax

; 105  : 	Sqlite3_errcode p_Sqlite3_errcode = (Sqlite3_errcode)address_sqlite3_errcode;

	mov	ecx, DWORD PTR _address_sqlite3_errcode$[ebp]
	mov	DWORD PTR _p_Sqlite3_errcode$[ebp], ecx

; 106  : 	Sqlite3_close p_Sqlite3_close = (Sqlite3_close)address_sqlite3_close;

	mov	edx, DWORD PTR _address_sqlite3_close$[ebp]
	mov	DWORD PTR _p_Sqlite3_close$[ebp], edx

; 107  : 
; 108  : 	rc = p_Sqlite3_open(zFilename, &pFile);

	lea	eax, DWORD PTR _pFile$[ebp]
	push	eax
	mov	ecx, DWORD PTR _zFilename$[ebp]
	push	ecx
	call	DWORD PTR _p_Sqlite3_open$[ebp]
	add	esp, 8
	mov	DWORD PTR _rc$[ebp], eax

; 109  : 
; 110  : 	if (rc == SQLITE_OK) {

	cmp	DWORD PTR _rc$[ebp], 0
	jne	$LN5@backupDb

; 111  : 
; 112  : 		pBackup = p_Sqlite3_backup_init(pFile, myMain, pDb, myMain);

	mov	edx, DWORD PTR _myMain$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _myMain$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pFile$[ebp]
	push	edx
	call	DWORD PTR _p_Sqlite3_backup_init$[ebp]
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pBackup$[ebp], eax

; 113  : 		if (pBackup) {

	cmp	DWORD PTR _pBackup$[ebp], 0
	je	SHORT $LN6@backupDb
$LN4@backupDb:

; 114  : 
; 115  : 			do {
; 116  : 				rc = p_Sqlite3_backup_step(pBackup, 5);

	push	5
	mov	eax, DWORD PTR _pBackup$[ebp]
	push	eax
	call	DWORD PTR _p_Sqlite3_backup_step$[ebp]
	add	esp, 8
	mov	DWORD PTR _rc$[ebp], eax

; 117  : 
; 118  : 				xProgress(

	mov	ecx, DWORD PTR _pBackup$[ebp]
	push	ecx
	call	DWORD PTR _p_Sqlite3_backup_pagecount$[ebp]
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _pBackup$[ebp]
	push	edx
	call	DWORD PTR _p_Sqlite3_backup_remaining$[ebp]
	add	esp, 4
	push	eax
	call	DWORD PTR _xProgress$[ebp]
	add	esp, 8

; 119  : 					p_Sqlite3_backup_remaining(pBackup),
; 120  : 					p_Sqlite3_backup_pagecount(pBackup)
; 121  : 				);
; 122  : 				if (rc == SQLITE_OK || rc == SQLITE_BUSY || rc == SQLITE_LOCKED) {

	cmp	DWORD PTR _rc$[ebp], 0
	je	SHORT $LN8@backupDb
	cmp	DWORD PTR _rc$[ebp], 5
	je	SHORT $LN8@backupDb
	cmp	DWORD PTR _rc$[ebp], 6
	jne	SHORT $LN2@backupDb
$LN8@backupDb:

; 123  : 					
; 124  : 					p_Sqlite3_sleep(50);

	push	50					; 00000032H
	call	DWORD PTR _p_Sqlite3_sleep$[ebp]
	add	esp, 4
$LN2@backupDb:

; 125  : 				}
; 126  : 			} while (rc == SQLITE_OK || rc == SQLITE_BUSY || rc == SQLITE_LOCKED);

	cmp	DWORD PTR _rc$[ebp], 0
	je	SHORT $LN4@backupDb
	cmp	DWORD PTR _rc$[ebp], 5
	je	SHORT $LN4@backupDb
	cmp	DWORD PTR _rc$[ebp], 6
	je	SHORT $LN4@backupDb

; 127  : 
; 128  : 			(void)p_Sqlite3_backup_finish(pBackup);

	mov	eax, DWORD PTR _pBackup$[ebp]
	push	eax
	call	DWORD PTR _p_Sqlite3_backup_finish$[ebp]
	add	esp, 4
$LN6@backupDb:

; 129  : 		}
; 130  : 		
; 131  : 		rc = p_Sqlite3_errcode(pFile);

	mov	ecx, DWORD PTR _pFile$[ebp]
	push	ecx
	call	DWORD PTR _p_Sqlite3_errcode$[ebp]
	add	esp, 4
	mov	DWORD PTR _rc$[ebp], eax
$LN5@backupDb:

; 132  : 	}
; 133  : 
; 134  : 	(void)p_Sqlite3_close(pFile);

	mov	edx, DWORD PTR _pFile$[ebp]
	push	edx
	call	DWORD PTR _p_Sqlite3_close$[ebp]
	add	esp, 4

; 135  : 	return rc;

	mov	eax, DWORD PTR _rc$[ebp]

; 136  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?backupDb@@YAHPAUsqlite3@@PBD1HHHHHHHHHP6AXHH@Z@Z ENDP	; backupDb
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	1
	call	___acrt_iob_func
	add	esp, 4
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 961  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

	push	ebp
	mov	ebp, esp

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___stdio_common_vfprintf
	add	esp, 24					; 00000018H

; 644  :     }

	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

	push	ebp
	mov	ebp, esp

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
